-d__flexelint_v9__=1

-esym(755, vct_*)
-esym(759, vev_*)
-esym(765, vev_*)
-esym(714, vev_*)
-esym(759, vpf_*)
-esym(765, vpf_*)
-esym(714, vpf_*)
-esym(759, H_*)
-esym(765, H_*)
-esym(757, VSL_*)
-esym(765, VLU_*)
-esym(759, VLU_*)
-esym(714, VLU_*)
-esym(765, VSS_*)
-esym(759, VSS_*)
-esym(755, VSL_*)
-esym(765, VSL_*)
-esym(759, VSL_*)
-esym(765, CLI_*)
-esym(759, CLI_*)
-esym(755, CLI_*)

// XXX: I think this is a flexelint bug:
-esym(522, vbit_clr)

// Stuff used outside varnishd
-esym(759, BackSlash)
-esym(765, BackSlash)
-esym(759, BackSlashDecode)
-esym(765, BackSlashDecode)
-esym(714, VSS_open)
-esym(757, base64*)


// Stuff used by compiled VCL
-esym(757, VRT_*)
-esym(759, VRT_*)
-esym(765, VRT_*)
-esym(714, VRT_*)
-esym(755, VRT_*)
-esym(765, vrt_magic_string_end)
-esym(759, vrt_magic_string_end)
-esym(768, vrt_ref::*)
-esym(768, VCL_conf::*)

// FLINT Bug20090910_838
-efunc(838, VRT_purge)
-efunc(838, VRT_purge_string)

// Stuff in VMODs which is used through dl*(3) functions
-esym(754, Vmod_Func*)
-esym(765, Vmod_Func)
-esym(552, Vmod_Func)
-esym(765, Vmod_Len)
-esym(714, Vmod_Len)
-esym(765, Vmod_Name)
-esym(714, Vmod_Name)
-esym(765, Vmod_Proto)
-esym(714, Vmod_Proto)
-esym(765, Vmod_Spec)
-esym(714, Vmod_Spec)

//-sem (pthread_mutex_lock, thread_lock)
-sem (pthread_mutex_trylock, thread_lock)
-sem (VBE_DropRefLocked, thread_unlock)
-e459	// unlocked access from func-ptr
-e454	// mutex not released (...ReleaseLocked)
-e457	// unprotected access
-e835	// A zero has been given as ___ argument to operator '___'  (<<)
-e777	// float equality comparison
-e679	// Suspicious Truncation in arithmetic expression combining with pointer

-esym(458, params)	// unlocked access

-emacro(835, HTTPH)	// Info 835: A zero has been given as left argument to operator '&'
-emacro(845, HTTPH)	// Info 845: The left argument to operator '&&' is certain to be 0
-esym(773, PCRE_DATE)	// Expression-like macro '___' not parenthesized
//////////////
-efunc(1791, pdiff)	// return last on line
//////////////
-efile(451, "sys/\*.h")	// No include guard
-efile(451, "machine/\*.h")	// No include guard
-efile(451, "vcl_returns.h")	// No include guard
-efile(451, "locks.h")	// No include guard
-efile(451, "cache_backend_poll.h")	// No include guard
-efile(451, "steps.h")	// No include guard
-efile(451, "http_headers.h")	// No include guard
-efile(451, "acct_fields.h")	// No include guard
-efile(451, "vcc_types.h")	// No include guard
-efile(451, "symbol_kind.h")	// No include guard
-efile(451, "config.h")	// No include guard
-efile(451, "vrt_stv_var.h")	// No include guard
//////////////
// -e458			// unprotected access
// -e456			// merged locking paths
-sem(vca_thread_acct, thread_mono)
-sem(vca_epoll_thread, thread_mono)
-sem(vca_kqueue_thread, thread_mono)
-sem(vca_poll_thread, thread_mono)
-sem(vca_ports_thread, thread_mono)
-sem(exp_timer, thread_mono)
-sem(wrk_herdtimer_thread, thread_mono)
-sem(wrk_herder_thread, thread_mono)
-esym(458, VSL_stats)
-esym(458, heritage)
-esym(458, name_key)

//////////////

+libh mgt_event.h

-emacro(527, NEEDLESS_RETURN)	// unreachable code

-sem(WS_Init, custodial(2))
-sem(http_Setup, custodial(2))

-sem(vdi_dns_cache_list_add, custodial(3))

-e455	// thread lock
-e458	// unprotected read
-e763	// Redundant declaration for symbol '...' previously declared
-e726	// Extraneous comma ignored
-e728	// Symbol ... not explicitly initialized
-e716	// while(1) ... 
-e785	// Too few initializers for aggregate 
-e786	// String concatenation within initializer

-esym(765, vcc_ProcAction) // could be made static
-esym(759, vcc_ProcAction) // could be moved to module
-esym(714, vcc_ProcAction) // not ref.

-esym(765, panicstr)	// Could be static

-emacro(506, isnan, isfinite)	// constant value boolean
-emacro(736, isfinite)	// loss of precision
-emacro(747, isnan)	// significant coersion
-emacro(774, HTTPH)	// always false
-emacro(527, ARGV_ERR)	// unreachable

-e788			// enum value not used in defaulted switch

// cache.h
-emacro(506, INCOMPL) // Constant value Boolean

-esym(525, __builtin_frame_address)	// Not defined
-esym(525, __builtin_return_address)	// Not defined

// cache_vcl.c
-esym(528, vcl_handlingname)	// Not referenced
-e641	// Converting enum 'cli_status_e' to int

-e441	//  for clause irregularity: loop variable '___' not found in 2nd for expression

// Review all below this line ///////////////////////////////////////////////

-e732   // 183 Loss of sign (___) (___ to ___)
-e737	// 143 Loss of sign in promotion from ___ to ___
-e713	// 42 Loss of precision (___) (___ to ___)
-e574	// 48 Signed-unsigned mix with relational
-e712	// 96 Loss of precision (___) (___ to ___)
-e747	// 297 Significant prototype coercion (___) ___ to ___
-e840	// Use of nul character in a string literal (see: vcc_if.c)
